// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPVWPF.Data;

#nullable disable

namespace TPVWPF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250505143118_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TPVWPF.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TPVWPF.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Instrumentos",
                            Description = "Guitarra Electrica Ibanez",
                            Name = "Guitarra",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Instrumentos",
                            Description = "Bajo Electrico Fender",
                            Name = "Bajo de 5 cuerdas",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Instrumentos",
                            Description = "Teclado Roland",
                            Name = "Teclado",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Instrumentos",
                            Description = "Guitarra de 6 cuerdas con cuerdas de nylon",
                            Name = "Guitarra acustica yamaha",
                            Price = 123.00m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Instrumentos",
                            Description = "Flauta orquestal",
                            Name = "Flauta transversa",
                            Price = 324.00m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Percusion",
                            Description = "Batería con doble bombo",
                            Name = "Batería Tama",
                            Price = 432.00m
                        },
                        new
                        {
                            Id = 7,
                            Category = "Accesorios",
                            Description = "Pedalera para distorsión de guitarra eléctrica",
                            Name = "Pedalera Ibanez TS-808",
                            Price = 80.00m
                        });
                });

            modelBuilder.Entity("TPVWPF.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TPVWPF.Models.TicketLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketLines");
                });

            modelBuilder.Entity("TPVWPF.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            Role = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("TPVWPF.Models.Ticket", b =>
                {
                    b.HasOne("TPVWPF.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TPVWPF.Models.TicketLine", b =>
                {
                    b.HasOne("TPVWPF.Models.Product", "Product")
                        .WithMany("TicketLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPVWPF.Models.Ticket", "Ticket")
                        .WithMany("TicketLines")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TPVWPF.Models.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TPVWPF.Models.Product", b =>
                {
                    b.Navigation("TicketLines");
                });

            modelBuilder.Entity("TPVWPF.Models.Ticket", b =>
                {
                    b.Navigation("TicketLines");
                });
#pragma warning restore 612, 618
        }
    }
}
